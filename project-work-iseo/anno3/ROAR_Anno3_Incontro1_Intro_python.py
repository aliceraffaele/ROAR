# -*- coding: utf-8 -*-
"""intro_python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jPIt2Q2M43MjwL-Aj85w56AbWq2FC_fg

# **INTRODUZIONE ALLE NOZIONI BASE DI PYTHON**

**TIPIZZAZIONE DINAMICA DELLE VARIABILI**

In Python è sufficiente assegnare un dato a una variabile senza specificarne il tipo, perché verrà riconosciuto in automatico.
"""

x1 = 2
x2 = 'Ciao'
x3 = 3.4

"""x1 è un **intero**, x2 è una **stringa**, x3 è un **float** (numero decimale)
print(x2 + x1) darebbe un errore:
"""

print(x2 + x1)

"""Il modo corretto di farlo è il seguente:"""

print(x2 + " X" + str(x1) + '!')

"""## **CICLI**

**IL CICLO FOR**

Sintassi:

for i in S:
> operazioni

Per ogni elemento i di un certo insieme S, compie alcune operazioni...

*Esempio con la funzione range (intervallo)*

Si supponga di voler stampare tutti i numeri fino a 10.


"""

N = 10
S = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # range(N+1) == S
S2 = [x for x in range(N+1)]
print(S2)
#for i in range(N+1):
#  print(str(i))

for i in S:
  print(str(i))

"""La funzione range può ricevere uno o due **parametri**:


*   se ne riceve uno, come in range(N+1), allora l'insieme che ritornerà sarà tutto l'intervallo [0, N+1) = [0, N]
*   se ne riceve due, come in range(a, b), allora l'insieme che ritornerà sarà tutto l'intervallo [a, b) = [a, b-1]

*Esempio con a = 2 e b = 5*
"""

a = 2
b = 5
for i in range(a, b):
  print(str(i))

"""**IL CICLO WHILE**

Sintassi:

while condizione:
> operazioni

Finché non si verifica una certa condizione, vengono eseguite ripetutamente alcune operazioni...

*Esempio analogo a quello visto con il ciclo for*

Si supponga di voler stampare tutti i numeri fino a 10.


"""

j = 0
while j < 11:
    print(str(j))
    j += 1 # j = j + 1

"""E se le istruzioni fossero invertite?"""

i = 0
while i < 11:
    i += 1 # i = i + 1
    print(str(i))

"""Sarebbe stampato anche il numero 11 perché il controllo della condizione

```
while i < 11:
```


avverrebbe **dopo** il comando 

```
print(str(i))
```

**NB**: attenzione all'ordine delle istruzioni!

**CONCATENAZIONE DI STRINGHE E ALTRI OGGETTI**
"""

s1 = 'Hello'
s2 = 'world'
# Modo 1
print(s1 + ' ' + s2)

# Modo 2
y = 45
print('{} {}\n{}'.format(s1, s2, y))

"""Quest'altro modo è più comodo quando ci sono oggetti diversi dalle stringhe che devono essere stampati.

*Esempio*:
"""

pi = 3.14
# Modo 1
print(s1 + ' ' + str(pi))
pi_str = '3.14'
# Modo 2
print('{} {}'.format(s1, pi_str))

"""**LISTE**"""

# Modo 1 per definire una lista: indicandone tutti gli elementi
lista1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Modo 2 per definire una lista: da vuota, aggiungendo elementi
lista2 = []
N = 13
for elem in range(1,N+1):
  #lista2.append(elem) # oppure: 
  lista2 += [elem]
print(lista2)

# Modo 2 più compatto sfruttando, sfruttando un ciclo for
lista2 = [x for x in range(1,N+1)]
print(lista2)

"""**OPERAZIONI CON LE LISTE**"""

# Lunghezza
len(lista1)
print('lista1 contiene ' + str(len(lista1)) + ' elementi')
print('lista1 contiene {} elementi'.format(len(lista1)))

# Concatenazione di due liste
lista3 = lista1 + lista2
print(lista3)

# Unione di due liste togliendo gli elementi che si ripetono -> Set
set1 = set(lista1 + lista2)
print(set1)

# Ripetizione
lista4 = ['Ciao!']*4
print(lista4)

# Appartenenza (o no) di un elemento a una lista
print(3 in lista3)
print(100 in lista3)
print(100 not in lista3)

# Iterazione sugli elementi di una lista
for x in lista2:
  print('Il quadrato di {} è {}'.format(x, pow(x,2)))

lista_new = [2, 4, 6, 8, 10]
lista_new[len(lista_new)-1]

# Indexing
L = [10, 3, 5, 6, 22, 18, 90]
print('Il terzo elemento della lista L è ' + str(L[3-1])) # L'indexing parte da 0 e non da 1
print('L''ultimo elemento della lista L è ' + str(L[len(L)-1])) # L'ultimo elemento ha indice len(L)-1, non solo len(L)!

print('Lunghezza della lista L = {}'.format(len(L)))
print(len(L))

# Indexing con numeri negativi, contando da destra
L = [10, 3, 5, 6, 22, 18, 90]
print('L''ultimo elemento della lista L è ' + str(L[-3]))

# Pezzi di lista
L = [10, 3, 5, 6, 22, 18, 90]
print(L[2:5]) # Stampa gli elementi nelle posizioni 2, 3 e 4 (5 escluso)

# Aggiornamento di un elemento di una lista
L[2] = 33
print(L)

L = [10, 3, 33, 6, 22, 18, 90]
for i in range(len(L)):
  L[i] = int(L[i]/2)

print(L)

"""**TUPLE (liste in sola lettura)**

Differiscono dalle liste perché gli elementi di una tupla sono racchiusi tra due parentesi tonde e non possono essere aggiornati
"""

tupla1 = (1, 2, 3)
print(tupla1)

tupla1[2] = 33

"""**MATRICI**"""

# a è una matrice 2-D 
a = [['Roy',80,75,85,90,95],
     ['John',75,80,75,85,100],
     ['Dave',80,80,80,90,95]]
print(a)

# b è una lista innestata, ma non una matrice: perché?
b = [['Roy',80,75,85,90,95],
    ['John',75,80,75],
    ['Dave',80,80,80,90,95]]
print(b)

# Uno dei vari modi per definire una matrice
num_righe = 5
num_colonne = 4
m_riga = [x for x in range(1, num_colonne+1)]
m1 = []
for i in range(num_righe):
    m1 += [[x+i for x in m_riga]]
print("m1 = " + str(m1))
#print(m_riga)

# Un altro modo
m = [[0 for y in range(num_colonne)] for x in range(num_righe)]
print(m)

# Aggiunta di [1,2,3,4,5] a m usando l'operatore +=
m += [[1,2,3,4,5]]
print(m)
print('\n')

# Stampa di m usando un ciclo for per una migliore visualizzazione
for i in range(len(m)):
    print(m[i])

# Rimozione dell'ultima riga aggiunta a m con l'operatore del
del m[len(m)-1]
print(m)

"""**FUNZIONI**

Sono procedure che vengono definite prima di essere chiamate e che possono ricevere dei parametri da utilizzare. Generalmente, una funzione può anche ritornare uno o più risultati (ma non è obbligatorio).
"""

def fun1(p1, p2):
    return p1 + 2*p2
  
p1 = 5
p2 = 3
p3 = fun1(p1, p2)
print('p3 = ' + str(p3))

"""**NB**: il passaggio dei parametri è fatto *per riferimento* e non per valore."""

def fun2(param1, param2):
  param1 = 2*param1
  param2 = int(param2/2)
  return param1 + param2

a = 3
b = 5
print('Risultato di fun2 = {}'.format(fun2(a,b)))
print('Dopo fun2, a = {} e b = {}'.format(a,b))

"""Ma attenzione quando passate oggetti come le liste!"""

def fun3(c, d, l):
  l += [c*d, int(c/d), round(c/d, 2)]
  return l

l = [2, 4, 6]
print('Lista l prima di fun2 = ' + str(l))
c = 10
d = 3
fun3(c, d, l)
print('Lista l dopo fun2 = ' + str(l))

